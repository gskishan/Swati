[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2025-04-23 19:16:33.022096",
  "module": null,
  "name": "material request",
  "script": "frappe.ui.form.on('Material Request Item', {\r\n    custom_create_task: function (frm, cdt, cdn) {\r\n            let row = locals[cdt][cdn];\r\n        \r\n            let dialog = new frappe.ui.Dialog({\r\n                title: \"Enter Details\",\r\n                fields: [\r\n                    {\r\n                        label: \"Is Group\",\r\n                        fieldname: \"is_group\",\r\n                        fieldtype: \"Check\"\r\n                    },\r\n                    {\r\n                        label: \"Subject\",\r\n                        fieldname: \"subject\",\r\n                        fieldtype: \"Data\"\r\n                    },\r\n                    {\r\n                        label: \"Expected Completed Date\",\r\n                        fieldname: \"expected_completed_date\",\r\n                        fieldtype: \"Date\"\r\n                    }\r\n                ],\r\n                primary_action_label: \"Create Task\",\r\n                primary_action: function (data) {\r\n                    \r\n                    if (!data.subject) {\r\n                        frappe.msgprint(\"Subject is required to create a task.\");\r\n                        return;\r\n                    }\r\n        \r\n                    let task_data = {\r\n                        doctype: \"Task\",\r\n                        subject: data.subject,\r\n                        is_group: data.is_group ? 1 : 0,\r\n                        custom_material_request: frm.doc.name,\r\n                        custom_task_item: [\r\n                            {\r\n                                item_code: row.item_code,\r\n                                qty: row.qty,\r\n                                \r\n                            }\r\n                        ]\r\n                    };\r\n    \r\n                    frappe.call({\r\n                        method: \"frappe.client.insert\",\r\n                        args: { doc: task_data },\r\n                        callback: function (r) {\r\n                            if (!r.exc) {\r\n                                frappe.msgprint(`Task created successfully: ${r.message.name}`);\r\n                                dialog.hide();\r\n                            } else {\r\n                                frappe.msgprint(`Error creating Task`);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        \r\n            // Show the dialog\r\n            dialog.show();\r\n        }\r\n    })\r\n    \r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2025-07-19 13:01:37.568958",
  "module": null,
  "name": "Opportunity",
  "script": "frappe.ui.form.on('Opportunity', {\r\n    refresh: function(frm) {\r\n    frm.add_custom_button('Bid', () => {\r\n    frappe.model.with_doctype('Bid', function() {\r\n                   var bid = frappe.model.get_new_doc('Bid');\r\n   \r\n                   // Copy fields from Opportunity\r\n                   bid.opportunity_from = \"Lead\";\r\n                   bid.party_name = frm.doc.party_name;\r\n                   bid.customer_name = frm.doc.customer_name;\r\n                   bid.opportunity_type = frm.doc.opportunity_type;\r\n                   bid.status = \"Open\";  // Default status\r\n                   bid.source=frm.doc.source;\r\n                   bid.opportunity_owner =frm.doc.opportunity_owner;\r\n                   bid.sales_stage =frm.doc.sales_stage;\r\n                   bid.expected_closing =frm.doc.expected_closing;\r\n                   bid.probability =frm.doc.probability;\r\n                   bid.custom_design_recieved =frm.doc.custom_design_recieved;\r\n                   bid.custom_date_of_entry =frm.doc.custom_date_of_entry;\r\n                   bid.custom_lead_title =frm.doc.custom_lead_title;\r\n                   bid.custom_lead_type =frm.doc.custom_lead_type;\r\n                   bid.custom_site_address =frm.doc.custom_site_address;\r\n                   bid.custom_short_description =frm.doc.custom_short_description;\r\n                   bid.custom_estimated_price =frm.doc.custom_estimated_price;\r\n                   bid.custom_win_probability =frm.doc.custom_win_probability;\r\n                   bid.custom_submission_date =frm.doc.custom_submission_date;\r\n                   bid.custom_delivery_period =frm.doc.custom_delivery_period;\r\n                   bid.custom_bid_manager =frm.doc.custom_bid_manager;\r\n                   bid.custom_sales_person =frm.doc.custom_sales_person;\r\n                   bid.custom_project_manager =frm.doc.custom_project_manager;\r\n                   bid.custom_customer_last_contacted_date =frm.doc.custom_customer_last_contacted_date;\r\n                   bid.custom_next_followup_date =frm.doc.custom_next_followup_date;\r\n                   bid.custom_bidno_bid =frm.doc.custom_bidno_bid;\r\n                   bid.opportunity = frm.doc.name;\r\n                   bid.custom_win__loss__cancelled =frm.doc.custom_win__loss__cancelled;\r\n                   bid.custom_reason_for_loss =frm.doc.custom_reason_for_loss;\r\n                   bid.custom_remarks =frm.doc.custom_remarks;\r\n                   bid.no_of_employees =frm.doc.no_of_employees;\r\n                   bid.annual_revenue =frm.doc.annual_revenue;\r\n                   bid.customer_group =frm.doc.customer_group;\r\n                   bid.industry =frm.doc.industry;\r\n                   bid.market_segment =frm.doc.market_segment;\r\n                   bid.website =frm.doc.website;\r\n                   bid.city =frm.doc.city;\r\n                   bid.state =frm.doc.state;\r\n                   bid.country =frm.doc.country;\r\n                   bid.territory =frm.doc.territory;\r\n                   bid.currency =frm.doc.currency;\r\n                   bid.conversion_rate =frm.doc.conversion_rate;\r\n                   bid.opportunity_amount =frm.doc.opportunity_amount;\r\n                   bid.base_opportunity_amount =frm.doc.base_opportunity_amount;\r\n                   bid.company =frm.doc.company;\r\n                   bid.transaction_date =frm.doc.transaction_date;\r\n                   bid.lost_reasons =frm.doc.lost_reasons;\r\n                   bid.order_lost_reason =frm.doc.order_lost_reason;\r\n                   bid.campaign =frm.doc.campaign;\r\n                   bid.title =frm.doc.title;\r\n                   bid.competitors =frm.doc.competitors;\r\n                   bid.contact_person =frm.doc.contact_person;\r\n                   bid.job_title =frm.doc.job_title;\r\n                   bid.contact_email =frm.doc.contact_email;\r\n                   bid.contact_mobile =frm.doc.contact_mobile;\r\n                   bid.whatsapp =frm.doc.whatsapp;\r\n                   bid.phone =frm.doc.phone;\r\n                   bid.phone_ext =frm.doc.phone_ext;\r\n                   bid.address_html =frm.doc.address_html;\r\n                   bid.customer_address =frm.doc.customer_address;\r\n                   bid.address_display =frm.doc.address_display;\r\n                   bid.contact_html =frm.doc.contact_html;\r\n                   bid.contact_display =frm.doc.contact_display;\r\n                   bid.base_total =frm.doc.base_total;\r\n                   bid.total =frm.doc.total;\r\n                   bid.open_activities_html =frm.doc.open_activities_html;\r\n                   bid.all_activities_html =frm.doc.all_activities_html;\r\n                   bid.notes_html =frm.doc.notes_html;\r\n                   bid.notes =frm.doc.notes;\r\n                   // Copy items if available\r\n                   if (frm.doc.items) {\r\n                       bid.items = frm.doc.items.map(item => ({\r\n                           item_code: item.item_code,\r\n                           item_name: item.item_name,\r\n                           qty: item.qty,\r\n                           rate: item.rate,\r\n                           uom:item.uom,\r\n                           brand:item.brand,\r\n                           item_group:item.item_group,\r\n                           description:item.description,\r\n                           image:item.image,\r\n                           image_view:item.image_view,\r\n                           base_rate:item.base_rate,\r\n                           base_amount:item.base_amount,\r\n                           amount:item.amount,\r\n                       }));\r\n                   }\r\n                   if (frm.doc.opportunity_from == \"Lead\"){\r\n                       bid.lead =frm.doc.party_name;\r\n                   }\r\n   \r\n                   // Open new form with pre-filled data\r\n                   frappe.set_route(\"Form\", \"Bid\", bid.name);\r\n               });\r\n   },__(\"Create\"));\r\n           if (frm.doc.opportunity_from == \"Lead\") {  // Ensure field name is correct\r\n               frappe.db.get_value(\"Lead\", { \"name\": frm.doc.party_name }, \"type\")\r\n                   .then(r => {\r\n                       if (r.message && r.message.type) {\r\n                           frm.set_value('custom_lead_type', r.message.type);\r\n                       }\r\n                   });\r\n           }\r\n    }\r\n   });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2025-04-17 10:28:11.096356",
  "module": "Swati",
  "name": "Leave Application",
  "script": "frappe.ui.form.on('Leave Application', {\n\ttotal_leave_days: function(frm) {\n\t\tif (frm.doc.leave_type == \"Sick Leave\" && frm.doc.total_leave_days > 3) {\n\t\t\tfrm.set_df_property(\"custom_upload_attach\", \"reqd\", 1);\n\t\t} else {\n\t\t\tfrm.set_df_property(\"custom_upload_attach\", \"reqd\", 0);\n\t\t}\n\t},\n\tbefore_save: function(frm) {\n\t    if (frm.doc.leave_type == \"Sick Leave\" && frm.doc.total_leave_days > 3) {\n\t\t\tfrm.set_df_property(\"custom_upload_attach\", \"reqd\", 1);\n\t\t} else {\n\t\t\tfrm.set_df_property(\"custom_upload_attach\", \"reqd\", 0);\n\t\t}\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-05-27 18:33:19.488010",
  "module": "Swati",
  "name": "Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t\tif (frm.is_new()) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            const first_item = frm.doc.items[0];\n\n            if (first_item.prevdoc_docname) {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Quotation\",\n                        name: first_item.prevdoc_docname\n                    },\n                    callback: function (res) {\n                        if (res.message) {\n                            const data = res.message;\n\n                            frm.set_value(\"custom_item_payment_terms_template\", data.custom_item_payment_terms_template);\n                            frm.set_value(\"custom_tax_payment_terms_template\", data.custom_tax_payment_terms_template); \n                            frm.clear_table(\"custom_item_payment_schedule\");\n\n                                if (Array.isArray(data.custom_item_payment_schedule)) {\n                                    data.custom_item_payment_schedule.forEach(item => {\n                                        let row = frm.add_child(\"custom_item_payment_schedule\");\n                                        row.payment_term = item.payment_term;\n                                        row.description = item.description;\n\n                                        // Handle due date\n                                       \n                                        row.due_date = item.due_date;\n                \n                                        row.invoice_portion = item.invoice_portion;\n                                        row.payment_amount = item.payment_amount;\n                                        row.outstanding = item.outstanding;\n                                        row.base_payment_amount = item.base_payment_amount;\n                                    });\n                                    frm.refresh_field(\"custom_item_payment_schedule\");\n                                }\n                                 frm.clear_table(\"custom_tax_payment_schedule\");\n\n                                if (Array.isArray(data.custom_tax_payment_schedule)) {\n                                    data.custom_tax_payment_schedule.forEach(item => {\n                                        let row = frm.add_child(\"custom_tax_payment_schedule\");\n                                        row.payment_term = item.payment_term;\n                                        row.description = item.description;\n\n                                        row.due_date =item.due_date;\n                \n                                        row.invoice_portion = item.invoice_portion;\n                                        row.payment_amount = item.payment_amount;\n                                        row.outstanding = item.outstanding;\n                                        row.base_payment_amount = item.base_payment_amount;\n                                    });\n                                    frm.refresh_field(\"custom_tax_payment_schedule\");\n                                }\n                        }\n                    }\n                });\n            }\n        }\n        }\n        if(frappe.session.user === 'Administrator') return;\n\t\tif(frappe.user_roles.includes('Restrict Update Items')){\n\t\tsetTimeout(() => {\n            frm.remove_custom_button('Update Items');\n        }, 10);\n\t\t}\n\t},\n    custom_item_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_item_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_item_payment_schedule');\n                }\n            });\n        }\n    },\n    custom_tax_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_tax_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_tax_payment_schedule');\n                }\n            });\n        }\n    },  custom_number_of_months: function(frm) {\n        // generate_payment_schedule(frm);\n        frappe.db.get_value(\n            \"Payment Terms Template\",\n            { custom_no_of_month: frm.doc.custom_number_of_months },\n            \"name\",\n            function(r) {\n                if (r && r.name) {\n                    frm.set_value(\"payment_terms_template\", r.name);\n                } else {\n                    frm.set_value(\"payment_terms_template\", null);\n                }\n            }\n        );\n    \n    },\n    custom_item_number_of_months: function(frm) {\n        populate_custom_item_payment_schedule(frm) \n        populate_custom_tax_payment_schedule(frm) \n        // generate_payment_schedule(frm);\n        frappe.db.get_value(\n            \"Payment Terms Template\",\n            { custom_no_of_month: frm.doc.custom_item_number_of_months },\n            \"name\",\n            function(r) {\n                if (r && r.name) {\n                    frm.set_value(\"custom_item_payment_terms_template\", r.name);\n                    frm.set_value(\"custom_tax_payment_terms_template\", r.name);\n                } else {\n                    frm.set_value(\"custom_item_payment_terms_template\", null);\n                    frm.set_value(\"custom_tax_payment_terms_template\", null);\n                }\n            }\n        );\n    \n    },\n})\n\n\n\nfunction populate_custom_item_payment_schedule(frm) {\n    if (frm.doc.custom_item_number_of_months) {\n        frappe.db.get_list('Payment Terms Template', {\n            filters: {\n                custom_no_of_month: frm.doc.custom_item_number_of_months\n            },\n            fields: ['name'],\n            limit: 1\n        }).then(result => {\n            if (result && result.length > 0) {\n                let template_name = result[0].name;\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template',\n                        name: template_name\n                    },\n                    callback: function(response) {\n                        let terms = response.message.terms || [];\n                        frm.clear_table('custom_item_payment_schedule');\n\n                        terms.forEach(function(ps) {\n                            let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                            new_payment_row.payment_term = ps.payment_term;\n                            new_payment_row.description = ps.description;\n\n                            let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                            let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                            new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                            let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                            new_payment_row.invoice_portion = ps.invoice_portion;\n                            new_payment_row.payment_amount = portion;\n                            new_payment_row.outstanding = portion;\n                            new_payment_row.base_payment_amount = portion;\n                        });\n\n                        frm.refresh_field('custom_item_payment_schedule');\n                    }\n                });\n\n            } else {\n                frappe.msgprint(__('No Payment Terms Template found for the selected number of months.'));\n            }\n        });\n    }\n}\nfunction populate_custom_tax_payment_schedule(frm) {\n    if (frm.doc.custom_item_number_of_months) {\n        frappe.db.get_list('Payment Terms Template', {\n            filters: {\n                custom_no_of_month: frm.doc.custom_item_number_of_months\n            },\n            fields: ['name'],\n            limit: 1\n        }).then(result => {\n            if (result && result.length > 0) {\n                let template_name = result[0].name;\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template',\n                        name: template_name\n                    },\n                    callback: function(response) {\n                        let terms = response.message.terms || [];\n                        frm.clear_table('custom_tax_payment_schedule');\n\n                        terms.forEach(function(ps) {\n                            let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                            new_payment_row.payment_term = ps.payment_term;\n                            new_payment_row.description = ps.description;\n\n                            let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                            let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                            new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                            let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                            new_payment_row.invoice_portion = ps.invoice_portion;\n                            new_payment_row.payment_amount = portion;\n                            new_payment_row.outstanding = portion;\n                            new_payment_row.base_payment_amount = portion;\n                        });\n\n                        frm.refresh_field('custom_tax_payment_schedule');\n                    }\n                });\n\n            } else {\n                frappe.msgprint(__('No Payment Terms Template found for the selected number of months.'));\n            }\n        });\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-04-21 16:35:12.434392",
  "module": "Swati",
  "name": "Request for Quotation",
  "script": "\nfrappe.ui.form.on(\"Request for Quotation\", \"custom_shipping_address\", function(frm, cdt, cdn) { \n    if(frm.doc.custom_shipping_address){ \n        return frm.call({ \n            method: \"frappe.contacts.doctype.address.address.get_address_display\", \n            args: { \n                \"address_dict\": frm.doc.custom_shipping_address\n                \n            }, \n            callback: function(r) { \n                if(r.message) \n                frm.set_value(\"custom_shipping_address_details\", r.message); \n                \n            } \n            \n        }); \n        \n    } \n    else{ \n        frm.set_value(\"custom_shipping_address_details\", \"\"); \n        \n    }\n    \n});\nfrappe.ui.form.on(\"Request for Quotation\", \"onload\", function(frm){\n frm.set_query(\"custom_shipping_address\", function(){\n return {\n \"filters\": [\n [\"Address\", \"link_doctype\", \"=\", \"Company\"],\n [\"Address\", \"link_name\", \"=\", frm.doc.company]\n ]\n }\n });\n});\n\n\nfrappe.ui.form.on('Request for Quotation', {\n    custom_payment_terms_template: function(frm) {\n        if (frm.doc.custom_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = 0;\n                        \n                    });\n                    frm.refresh_field('custom_payment_schedule');\n                }\n            });\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-04-21 16:53:53.550822",
  "module": "Swati",
  "name": "Purchase order",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n        if (frm.is_new()) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            const first_item = frm.doc.items[0];\n\n            if (first_item.supplier_quotation) {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Supplier Quotation\",\n                        name: first_item.supplier_quotation\n                    },\n                    callback: function (res) {\n                        if (res.message) {\n                            const data = res.message;\n\n                            frm.set_value(\"payment_terms_template\", data.custom_payment_terms_template);\n                             frm.clear_table(\"payment_schedule\");\n\n                                if (Array.isArray(data.custom_payment_schedule)) {\n                                    data.custom_payment_schedule.forEach(item => {\n                                        let row = frm.add_child(\"payment_schedule\");\n                                        row.payment_term = item.payment_term;\n                                        row.description = item.description;\n\n                                        // Handle due date\n                                       \n                                       let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                                        let due_date = frappe.datetime.add_days(date, item.credit_days);\n                                        row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                                        // // Handle amount calculations\n                                        let portion = (item.invoice_portion / 100) * frm.doc.grand_total;\n                                        row.invoice_portion = item.invoice_portion;\n                                        row.payment_amount = portion;\n                                        row.outstanding = portion;\n                                        row.base_payment_amount = portion;\n                                    });\n                                    frm.refresh_field(\"payment_schedule\");\n                                }\n\n                        }\n                    }\n                });\n            }\n        }\n     }\n\tsetTimeout(() => {\n            frm.remove_custom_button('Update Items');\n        }, 10);\n\t},\n    custom_item_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_item_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_item_payment_schedule');\n                }\n            });\n        }\n    },\n    custom_tax_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_tax_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_tax_payment_schedule');\n                }\n            });\n        }\n    }\n\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-05-27 18:37:06.967100",
  "module": "Swati",
  "name": "Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh(frm) {\n        if (frm.is_new()) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            const first_item = frm.doc.items[0];\n\n            if (first_item.sales_order) {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Sales Order\",\n                        name: first_item.sales_order\n                    },\n                    callback: function (res) {\n                        if (res.message) {\n                            const data = res.message;\n\n                            frm.set_value(\"custom_item_payment_terms_template\", data.custom_item_payment_terms_template);\n                            frm.set_value(\"custom_tax_payment_terms_template\", data.custom_tax_payment_terms_template); \n\n                        }\n                    }\n                });\n            }\n        }\n        }\n    },\n\n    custom_item_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_item_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.posting_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_item_payment_schedule');\n                }\n            });\n        }\n    },\n    custom_tax_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_tax_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.posting_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_tax_payment_schedule');\n                }\n            });\n        }\n    },\n    custom_number_of_months: function(frm) {\n        // generate_payment_schedule(frm);\n        frappe.db.get_value(\n            \"Payment Terms Template\",\n            { custom_no_of_month: frm.doc.custom_number_of_months },\n            \"name\",\n            function(r) {\n                if (r && r.name) {\n                    frm.set_value(\"payment_terms_template\", r.name);\n                } else {\n                    frm.set_value(\"payment_terms_template\", null);\n                }\n            }\n        );\n    \n    },\n    custom_item_number_of_months: function(frm) {\n        populate_custom_item_payment_schedule(frm) \n        populate_custom_tax_payment_schedule(frm) \n        // generate_payment_schedule(frm);\n        frappe.db.get_value(\n            \"Payment Terms Template\",\n            { custom_no_of_month: frm.doc.custom_item_number_of_months },\n            \"name\",\n            function(r) {\n                if (r && r.name) {\n                    frm.set_value(\"custom_item_payment_terms_template\", r.name);\n                    frm.set_value(\"custom_tax_payment_terms_template\", r.name);\n                } else {\n                    frm.set_value(\"custom_item_payment_terms_template\", null);\n                    frm.set_value(\"custom_tax_payment_terms_template\", null);\n                }\n            }\n        );\n    \n    },\n\n\n\n\n})\n\n\nfunction populate_custom_item_payment_schedule(frm) {\n    if (frm.doc.custom_item_number_of_months) {\n        frappe.db.get_list('Payment Terms Template', {\n            filters: {\n                custom_no_of_month: frm.doc.custom_item_number_of_months\n            },\n            fields: ['name'],\n            limit: 1\n        }).then(result => {\n            if (result && result.length > 0) {\n                let template_name = result[0].name;\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template',\n                        name: template_name\n                    },\n                    callback: function(response) {\n                        let terms = response.message.terms || [];\n                        frm.clear_table('custom_item_payment_schedule');\n\n                        terms.forEach(function(ps) {\n                            let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                            new_payment_row.payment_term = ps.payment_term;\n                            new_payment_row.description = ps.description;\n\n                            let date = frappe.datetime.str_to_obj(frm.doc.posting_date);\n                            let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                            new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                            let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                            new_payment_row.invoice_portion = ps.invoice_portion;\n                            new_payment_row.payment_amount = portion;\n                            new_payment_row.outstanding = portion;\n                            new_payment_row.base_payment_amount = portion;\n                        });\n\n                        frm.refresh_field('custom_item_payment_schedule');\n                    }\n                });\n\n            } else {\n                frappe.msgprint(__('No Payment Terms Template found for the selected number of months.'));\n            }\n        });\n    }\n}\nfunction populate_custom_tax_payment_schedule(frm) {\n    if (frm.doc.custom_item_number_of_months) {\n        frappe.db.get_list('Payment Terms Template', {\n            filters: {\n                custom_no_of_month: frm.doc.custom_item_number_of_months\n            },\n            fields: ['name'],\n            limit: 1\n        }).then(result => {\n            if (result && result.length > 0) {\n                let template_name = result[0].name;\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template',\n                        name: template_name\n                    },\n                    callback: function(response) {\n                        let terms = response.message.terms || [];\n                        frm.clear_table('custom_tax_payment_schedule');\n\n                        terms.forEach(function(ps) {\n                            let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                            new_payment_row.payment_term = ps.payment_term;\n                            new_payment_row.description = ps.description;\n\n                            let date = frappe.datetime.str_to_obj(frm.doc.posting_date);\n                            let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                            new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                            let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                            new_payment_row.invoice_portion = ps.invoice_portion;\n                            new_payment_row.payment_amount = portion;\n                            new_payment_row.outstanding = portion;\n                            new_payment_row.base_payment_amount = portion;\n                        });\n\n                        frm.refresh_field('custom_tax_payment_schedule');\n                    }\n                });\n\n            } else {\n                frappe.msgprint(__('No Payment Terms Template found for the selected number of months.'));\n            }\n        });\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2025-06-13 17:49:47.207002",
  "module": "Swati",
  "name": "Quotation",
  "script": "frappe.ui.form.on('Quotation', {\n    custom_item_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_item_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_item_payment_schedule');\n                }\n            });\n        }\n    },\n    custom_tax_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_tax_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_tax_payment_schedule');\n                }\n            });\n\n        }\n    },  custom_number_of_months: function(frm) {\n        // generate_payment_schedule(frm);\n        frappe.db.get_value(\n            \"Payment Terms Template\",\n            { custom_no_of_month: frm.doc.custom_number_of_months },\n            \"name\",\n            function(r) {\n                if (r && r.name) {\n                    frm.set_value(\"payment_terms_template\", r.name);\n                } else {\n                    frm.set_value(\"payment_terms_template\", null);\n                }\n            }\n        );\n    \n    },\n      custom_item_number_of_months: function(frm) {\n        populate_custom_item_payment_schedule(frm) \n        populate_custom_tax_payment_schedule(frm) \n        // generate_payment_schedule(frm);\n        frappe.db.get_value(\n            \"Payment Terms Template\",\n            { custom_no_of_month: frm.doc.custom_item_number_of_months },\n            \"name\",\n            function(r) {\n                if (r && r.name) {\n                    frm.set_value(\"custom_item_payment_terms_template\", r.name);\n                    frm.set_value(\"custom_tax_payment_terms_template\", r.name);\n                } else {\n                    frm.set_value(\"custom_item_payment_terms_template\", null);\n                    frm.set_value(\"custom_tax_payment_terms_template\", null);\n                }\n            }\n        );\n    \n    },\n\n\n\n})\nfunction populate_custom_item_payment_schedule(frm) {\n    if (frm.doc.custom_item_number_of_months) {\n        frappe.db.get_list('Payment Terms Template', {\n            filters: {\n                custom_no_of_month: frm.doc.custom_item_number_of_months\n            },\n            fields: ['name'],\n            limit: 1\n        }).then(result => {\n            if (result && result.length > 0) {\n                let template_name = result[0].name;\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template',\n                        name: template_name\n                    },\n                    callback: function(response) {\n                        let terms = response.message.terms || [];\n                        frm.clear_table('custom_item_payment_schedule');\n\n                        terms.forEach(function(ps) {\n                            let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                            new_payment_row.payment_term = ps.payment_term;\n                            new_payment_row.description = ps.description;\n\n                            let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                            let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                            new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                            let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                            new_payment_row.invoice_portion = ps.invoice_portion;\n                            new_payment_row.payment_amount = portion;\n                            new_payment_row.outstanding = portion;\n                            new_payment_row.base_payment_amount = portion;\n                        });\n\n                        frm.refresh_field('custom_item_payment_schedule');\n                    }\n                });\n\n            } else {\n                frappe.msgprint(__('No Payment Terms Template found for the selected number of months.'));\n            }\n        });\n    }\n}\nfunction populate_custom_tax_payment_schedule(frm) {\n    if (frm.doc.custom_item_number_of_months) {\n        frappe.db.get_list('Payment Terms Template', {\n            filters: {\n                custom_no_of_month: frm.doc.custom_item_number_of_months\n            },\n            fields: ['name'],\n            limit: 1\n        }).then(result => {\n            if (result && result.length > 0) {\n                let template_name = result[0].name;\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Payment Terms Template',\n                        name: template_name\n                    },\n                    callback: function(response) {\n                        let terms = response.message.terms || [];\n                        frm.clear_table('custom_tax_payment_schedule');\n\n                        terms.forEach(function(ps) {\n                            let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                            new_payment_row.payment_term = ps.payment_term;\n                            new_payment_row.description = ps.description;\n\n                            let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                            let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                            new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                            let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                            new_payment_row.invoice_portion = ps.invoice_portion;\n                            new_payment_row.payment_amount = portion;\n                            new_payment_row.outstanding = portion;\n                            new_payment_row.base_payment_amount = portion;\n                        });\n\n                        frm.refresh_field('custom_tax_payment_schedule');\n                    }\n                });\n\n            } else {\n                frappe.msgprint(__('No Payment Terms Template found for the selected number of months.'));\n            }\n        });\n    }\n}\n\nfrappe.ui.form.on(\"Quotation\", \"onload\", function(frm){\n frm.set_query(\"custom_sub_category\", function(){\n return {\n \"filters\": [\n [\"Sub Category\", \"category\", \"=\", frm.doc.custom_category],\n ]\n }\n });\n});\n\n\nfrappe.ui.form.on('Quotation Item', {\n    item_code: function(frm, cdt, cdn) {\n        calculate_sales_price(frm, cdt, cdn);\n    },\n    rate: function(frm, cdt, cdn) {\n        calculate_sales_price(frm, cdt, cdn);\n    },\n    mng_factor: function(frm, cdt, cdn) {\n        calculate_sales_price(frm, cdt, cdn);\n    },\n    inflation: function(frm, cdt, cdn) {\n        calculate_sales_price(frm, cdt, cdn);\n    }\n\n    // Function to calculate Sales Price\n});\n\nfunction calculate_sales_price(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    if (row.rate) {\n        let sales_price = row.rate * row.mng_factor * row.inflation;\n        frappe.model.set_value(cdt, cdn, 'custom_sales_price', sales_price);\n        frm.refresh_field('items');\n    }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-04-21 14:25:09.972511",
  "module": "Swati",
  "name": "Purchase Invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh(frm) {\n        if (frm.is_new()) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            const first_item = frm.doc.items[0];\n\n            if (first_item.purchase_order) {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Purchase Order\",\n                        name: first_item.purchase_order\n                    },\n                    callback: function (res) {\n                        if (res.message) {\n                            const data = res.message;\n\n                            frm.set_value(\"custom_item_payment_terms_template\", data.custom_item_payment_terms_template);\n                            frm.set_value(\"custom_tax_payment_terms_template\", data.custom_tax_payment_terms_template);\n                            frm.clear_table(\"custom_item_payment_schedule\");\n\n                                if (Array.isArray(data.custom_item_payment_schedule)) {\n                                    data.custom_item_payment_schedule.forEach(item => {\n                                        let row = frm.add_child(\"custom_item_payment_schedule\");\n                                        row.payment_term = item.payment_term;\n                                        row.description = item.description;\n\n                                        // Handle due date\n                                       \n                                        row.due_date = item.due_date;\n                \n                                        row.invoice_portion = item.invoice_portion;\n                                        row.payment_amount = item.payment_amount;\n                                        row.outstanding = item.outstanding;\n                                        row.base_payment_amount = item.base_payment_amount;\n                                    });\n                                    frm.refresh_field(\"custom_item_payment_schedule\");\n                                }\n                                 frm.clear_table(\"custom_tax_payment_schedule\");\n\n                                if (Array.isArray(data.custom_tax_payment_schedule)) {\n                                    data.custom_tax_payment_schedule.forEach(item => {\n                                        let row = frm.add_child(\"custom_tax_payment_schedule\");\n                                        row.payment_term = item.payment_term;\n                                        row.description = item.description;\n\n                                        row.due_date =item.due_date;\n                \n                                        row.invoice_portion = item.invoice_portion;\n                                        row.payment_amount = item.payment_amount;\n                                        row.outstanding = item.outstanding;\n                                        row.base_payment_amount = item.base_payment_amount;\n                                    });\n                                    frm.refresh_field(\"custom_tax_payment_schedule\");\n                                }\n\n                        }\n                    }\n                });\n            }\n        }\n        }\n    },\n\n    custom_item_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_item_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_item_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.posting_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.net_total;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_item_payment_schedule');\n                }\n            });\n        }\n    },\n    custom_tax_payment_terms_template: function(frm) {\n        if (frm.doc.custom_item_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_item_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_tax_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_tax_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.posting_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.total_taxes_and_charges;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_tax_payment_schedule');\n                }\n            });\n        }\n    }\n\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-04-21 16:48:23.822635",
  "module": "Swati",
  "name": "Supplier Quotation",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    refresh(frm) {\n        if (frm.is_new()) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            const first_item = frm.doc.items[0];\n\n            if (first_item.request_for_quotation) {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Request for Quotation\",\n                        name: first_item.request_for_quotation\n                    },\n                    callback: function (res) {\n                        if (res.message) {\n                            const data = res.message;\n\n                            frm.set_value(\"custom_payment_terms_template\", data.custom_payment_terms_template);\n                             frm.clear_table(\"custom_payment_schedule\");\n\n                                if (Array.isArray(data.custom_payment_schedule)) {\n                                    data.custom_payment_schedule.forEach(item => {\n                                        let row = frm.add_child(\"custom_payment_schedule\");\n                                        row.payment_term = item.payment_term;\n                                        row.description = item.description;\n\n                                        // Handle due date\n                                       \n                                       let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                                        let due_date = frappe.datetime.add_days(date, item.credit_days);\n                                        row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                                        // // Handle amount calculations\n                                        let portion = (item.invoice_portion / 100) * frm.doc.grand_total;\n                                        row.invoice_portion = item.invoice_portion;\n                                        row.payment_amount = portion;\n                                        row.outstanding = portion;\n                                        row.base_payment_amount = portion;\n                                    });\n                                    frm.refresh_field(\"custom_payment_schedule\");\n                                }\n\n                        }\n                    }\n                });\n            }\n        }\n        }\n    },\n    custom_payment_terms_template: function(frm) {\n        if (frm.doc.custom_payment_terms_template) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Payment Terms Template',\n                    name: frm.doc.custom_payment_terms_template,\n                },\n                callback: function(response) {\n                    let terms = response.message.terms || [];\n                    frm.clear_table('custom_payment_schedule');\n\n                    terms.forEach(function(ps) {\n                        let new_payment_row = frm.add_child('custom_payment_schedule');\n                        new_payment_row.payment_term = ps.payment_term;\n                        new_payment_row.description = ps.description;\n\n                        // Handle due date\n                        let date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n                        let due_date = frappe.datetime.add_days(date, ps.credit_days);\n                        new_payment_row.due_date = frappe.datetime.obj_to_str(due_date);\n\n                        // // Handle amount calculations\n                        let portion = (ps.invoice_portion / 100) * frm.doc.grand_total;\n                        new_payment_row.invoice_portion = ps.invoice_portion;\n                        new_payment_row.payment_amount = portion;\n                        new_payment_row.outstanding = portion;\n                        new_payment_row.base_payment_amount = portion;\n                    });\n                    frm.refresh_field('custom_payment_schedule');\n                }\n            });\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-04-23 19:47:58.824511",
  "module": "Swati",
  "name": "Stock Entry",
  "script": "frappe.ui.form.on(\"Stock Entry\", {\n    onload: function(frm) {\n        frm.set_query(\"custom_company_address\", () => {\n            return {\n                filters: [\n                    [\"Address\", \"link_doctype\", \"=\", \"Company\"]\n                ]\n            };\n        });\n    },\n\n    custom_site_address: function(frm) {\n        if (frm.doc.custom_site_address) {\n            frm.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    address_dict: frm.doc.custom_site_address\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value(\"custom_site_address_display\", r.message);\n                    }\n                }\n            });\n        } else {\n            frm.set_value(\"custom_site_address_display\", \"\");\n        }\n    },\n\n    custom_company_address: function(frm) {\n        if (frm.doc.custom_company_address) {\n            frm.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    address_dict: frm.doc.custom_company_address\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value(\"custom_company_address_display\", r.message);\n                    }\n                }\n            });\n        } else {\n            frm.set_value(\"custom_company_address_display\", \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-04-24 16:24:09.602929",
  "module": "Swati",
  "name": "Lead",
  "script": "frappe.ui.form.on('Lead', {\n\ttype: function(frm) {\n        if (frm.doc.type == \"Client\") {\n            frm.set_value(\"naming_series\", \"CLIENT.####\");\n        } else if (frm.doc.type == \"Channel Partner\") {\n            frm.set_value(\"naming_series\", \"CHANNELPART.####\");\n        } else if (frm.doc.type == \"Consultant\") {\n            frm.set_value(\"naming_series\", \"CONSULTANT.####\");\n        } else {\n            frm.set_value(\"naming_series\", \"\");  // default fallback\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2025-05-25 18:40:32.122603",
  "module": null,
  "name": "Payment Entry",
  "script": "frappe.ui.form.on('Payment Entry', {\n    custom_get_outstanding_project_wise_invoice: function (frm) {\n        if (frm.doc.payment_type == \"Receive\") {\n            let dialog = new frappe.ui.Dialog({\n                title: __('Filters'),\n                fields: [\n                    { fieldname: 'from_date', label: __('From Date'), fieldtype: 'Date' },\n                    { fieldname: 'to_date', label: __('To Date'), fieldtype: 'Date' },\n                    { fieldname: 'project', label: __('Project'), fieldtype: 'Link', options: 'Project' },\n                    { fieldname: 'cost_center', label: __('Cost Center'), fieldtype: 'Link', options: 'Cost Center' },\n                    { fieldname: 'allocate_payment_amount', label: __('Allocate Payment Amount'), fieldtype: 'Check', default: 1 }\n                ],\n                primary_action_label: __('Get Invoices'),\n                primary_action: function (values) {\n                    frappe.call({\n                        method: \"swati_app.custom_script.payment_entry.payment_entry.get_outstanding_sales_invoices\",\n                        args: {\n                            company: frm.doc.company,\n                            party_type: frm.doc.party_type,\n                            party: frm.doc.party,\n                            posting_date: frm.doc.posting_date,\n                            project: values.project,\n                            cost_center: values.cost_center\n                        },\n                        callback: function (r) {\n                            if (r.message && r.message.length) {\n                                frm.clear_table(\"references\");\n\n                                r.message.forEach(function (invoice) {\n                                    frm.add_child(\"references\", {\n                                        reference_doctype: \"Sales Invoice\",\n                                        reference_name: invoice.name,\n                                        due_date: invoice.due_date,\n                                        total_amount: invoice.grand_total || 0,\n                                        outstanding_amount: invoice.outstanding_amount || 0,\n                                        account: invoice.debit_to || 0,\n                                        allocated_amount: values.allocate_payment_amount ? invoice.outstanding_amount : 0\n                                    });\n                      \n                                });\n\n                                frm.refresh_field(\"references\");\n                                frappe.msgprint(__(\"{0} invoices added to references table.\", [r.message.length]));\n                            } else {\n                                frappe.msgprint(__('No outstanding invoices found.'));\n                            }\n                        }\n                    });\n                    dialog.hide();\n                }\n            });\n\n            dialog.show();\n        }\n        \n                if (frm.doc.payment_type == \"Pay\") {\n                    let dialog = new frappe.ui.Dialog({\n                        title: __('Filters'),\n                        fields: [\n                            { fieldname: 'from_date', label: __('From Date'), fieldtype: 'Date' },\n                            { fieldname: 'to_date', label: __('To Date'), fieldtype: 'Date' },\n                            { fieldname: 'project', label: __('Project'), fieldtype: 'Link', options: 'Project' },\n                            { fieldname: 'cost_center', label: __('Cost Center'), fieldtype: 'Link', options: 'Cost Center' },\n                            { fieldname: 'allocate_payment_amount', label: __('Allocate Payment Amount'), fieldtype: 'Check', default: 1 }\n                        ],\n                        primary_action_label: __('Get Invoices'),\n                        primary_action: function (values) {\n                            frappe.call({\n                                method: \"swati_app.custom_script.payment_entry.payment_entry.get_outstanding_purchase_invoices\",\n                                args: {\n                                    company: frm.doc.company,\n                                    party_type: frm.doc.party_type,\n                                    party: frm.doc.party,\n                                    posting_date: frm.doc.posting_date,\n                                    project: values.project,\n                                    cost_center: values.cost_center\n                                },\n                                callback: function (r) {\n                                    if (r.message && r.message.length) {\n                                        frm.clear_table(\"references\");\n        \n                                        r.message.forEach(function (invoice) {\n                                            frm.add_child(\"references\", {\n                                                reference_doctype: \"Purchase Invoice\",\n                                                reference_name: invoice.name,\n                                                due_date: invoice.due_date,\n                                                total_amount: invoice.grand_total || 0,\n                                                outstanding_amount: invoice.outstanding_amount || 0,\n                                                bill_no :invoice.bill_no || 0,\n                                                account: invoice.credit_to || 0,\n                                                exchange_rate : invoice.conversion_rate || 0,\n                                                allocated_amount: values.allocate_payment_amount ? invoice.outstanding_amount : 0\n                                            });\n                                        });\n        \n                                        frm.refresh_field(\"references\");\n                                        frappe.msgprint(__(\"{0} invoices added to references table.\", [r.message.length]));\n                                    } else {\n                                        frappe.msgprint(__('No outstanding invoices found.'));\n                                    }\n                                }\n                            });\n                            dialog.hide();\n                        }\n                    });\n        \n                    dialog.show();\n                } \n            },\n                custom_get_outstanding_project_wise_order: function (frm) {\n                    if (frm.doc.payment_type == \"Receive\") {\n                        let dialog = new frappe.ui.Dialog({\n                            title: __('Filters'),\n                            fields: [\n                                { fieldname: 'from_date', label: __('From Date'), fieldtype: 'Date' },\n                                { fieldname: 'to_date', label: __('To Date'), fieldtype: 'Date' },\n                                { fieldname: 'project', label: __('Project'), fieldtype: 'Link', options: 'Project' },\n                                { fieldname: 'cost_center', label: __('Cost Center'), fieldtype: 'Link', options: 'Cost Center' },\n                                { fieldname: 'allocate_payment_amount', label: __('Allocate Payment Amount'), fieldtype: 'Check', default: 1 }\n                            ],\n                            primary_action_label: __('Get Invoices'),\n                            primary_action: function (values) {\n                                frappe.call({\n                                    method: \"swati_app.custom_script.payment_entry.payment_entry.get_outstanding_sales_orders\",\n                                    args: {\n                                        company: frm.doc.company,\n                                        party_type: frm.doc.party_type,\n                                        party: frm.doc.party,\n                                        posting_date: frm.doc.posting_date,\n                                        project: values.project,\n                                        cost_center: values.cost_center\n                                    },\n                                    callback: function (r) {\n                                        if (r.message && r.message.length) {\n                                            frm.clear_table(\"references\");\n            \n                                            r.message.forEach(function (invoice) {\n                                                frm.add_child(\"references\", {\n                                                    reference_doctype: \"Sales Order\",\n                                                    reference_name: invoice.name,\n                                                    total_amount: invoice.grand_total || 0,\n                                                    outstanding_amount: invoice.grand_total - invoice.advance_paid|| 0,\n                                                    allocated_amount: values.allocate_payment_amount ? invoice.grand_total - invoice.advance_paid : 0\n                                                });\n                                  \n                                            });\n            \n                                            frm.refresh_field(\"references\");\n                                            frappe.msgprint(__(\"{0} invoices added to references table.\", [r.message.length]));\n                                        } else {\n                                            frappe.msgprint(__('No outstanding invoices found.'));\n                                        }\n                                    }\n                                });\n                                dialog.hide();\n                            }\n                        });\n            \n                        dialog.show();\n                    } \n                            if (frm.doc.payment_type == \"Pay\") {\n                                let dialog = new frappe.ui.Dialog({\n                                    title: __('Filters'),\n                                    fields: [\n                                        { fieldname: 'from_date', label: __('From Date'), fieldtype: 'Date' },\n                                        { fieldname: 'to_date', label: __('To Date'), fieldtype: 'Date' },\n                                        { fieldname: 'project', label: __('Project'), fieldtype: 'Link', options: 'Project' },\n                                        { fieldname: 'cost_center', label: __('Cost Center'), fieldtype: 'Link', options: 'Cost Center' },\n                                        { fieldname: 'allocate_payment_amount', label: __('Allocate Payment Amount'), fieldtype: 'Check', default: 1 }\n                                    ],\n                                    primary_action_label: __('Get Invoices'),\n                                    primary_action: function (values) {\n                                        frappe.call({\n                                            method: \"swati_app.custom_script.payment_entry.payment_entry.get_outstanding_purchase_orders\",\n                                            args: {\n                                                company: frm.doc.company,\n                                                party_type: frm.doc.party_type,\n                                                party: frm.doc.party,\n                                                posting_date: frm.doc.posting_date,\n                                                project: values.project,\n                                                cost_center: values.cost_center\n                                            },\n                                            callback: function (r) {\n                                                if (r.message && r.message.length) {\n                                                    frm.clear_table(\"references\");\n                    \n                                                    r.message.forEach(function (invoice) {\n                                                        frm.add_child(\"references\", {\n                                                            reference_doctype: \"Purchase Order\",\n                                                            reference_name: invoice.name,\n                                                            total_amount: invoice.grand_total || 0,\n                                                            outstanding_amount: invoice.grand_total - invoice.advance_paid || 0,\n                                                            exchange_rate : invoice.conversion_rate || 0,\n                                                            allocated_amount: values.allocate_payment_amount ? invoice.grand_total - invoice.advance_paid : 0\n                                                        });\n                                                    });\n                    \n                                                    frm.refresh_field(\"references\");\n                                                    frappe.msgprint(__(\"{0} invoices added to references table.\", [r.message.length]));\n                                                } else {\n                                                    frappe.msgprint(__('No outstanding invoices found.'));\n                                                }\n                                            }\n                                        });\n                                        dialog.hide();\n                                    }\n                                });\n                    \n                                dialog.show();\n                            } \n                        }\n                    \n                 \n        });\n     \n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget",
  "enabled": 1,
  "modified": "2025-05-29 20:47:31.212212",
  "module": null,
  "name": "Budget",
  "script": "frappe.ui.form.on('Budget', {\n    onload: function(frm) {\n        // Filter for Reference Doctype\n        frm.set_query('custom_refrence_doctype', () => {\n            return {\n                filters: {\n                    name: ['in', ['Sales Order', 'Quotation']]\n                }\n            };\n        });\n\n        // Filter for Reference Name (based on selected Reference Doctype and docstatus != 2)\n        frm.set_query('custom_refrence_name', () => {\n            if (!frm.doc.custom_refrence_doctype) {\n                return {};\n            }\n            return {\n                doctype: frm.doc.custom_refrence_doctype,\n                filters: {\n                    docstatus: ['!=', 2]\n                }\n            };\n        });\n    },\n    \n});\n\n\n\nfrappe.ui.form.on('Budget Account', {\n    custom_budget_category: async function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        const ref_doctype = frm.doc.custom_refrence_doctype;\n        const ref_name = frm.doc.custom_refrence_name;\n        const selected_category = row.custom_budget_category;\n\n        // Ensure required fields are present\n        if (!ref_doctype || !ref_name || !selected_category) {\n            console.warn(\"Missing reference or category\");\n            return;\n        }\n\n        try {\n            // Fetch reference document\n            const doc = await frappe.db.get_doc(ref_doctype, ref_name);\n            console.log(\"Fetched reference document:\", doc);\n\n            let total = 0;\n\n            // Ensure doc has items and is not cancelled\n            if (doc.docstatus !== 2 && Array.isArray(doc.items)) {\n                doc.items.forEach(item => {\n                    if (item.custom_budget_category === selected_category) {\n                        total += item.amount || 0;\n                    }\n                });\n            }\n\n            console.log(\"Calculated Budget Amount:\", total);\n\n            frappe.model.set_value(cdt, cdn, 'budget_amount', total);\n        } catch (err) {\n            console.error(\"Error fetching reference document:\", err);\n            frappe.msgprint(`Failed to fetch data from ${ref_doctype} - ${ref_name}`);\n        }\n    }\n});\n",
  "view": "Form"
 }
]